@namespace WebVella.Pulsar.Components
@inherits WvpBase
@using WebVella.Pulsar.Models
@using WebVella.Pulsar.Utils
@using WebVella.Pulsar.Services;
@using System.Diagnostics;

@if (!String.IsNullOrWhiteSpace(svgHtml))
{
	<span class="wvp-icon @InternalCssClass @Class" @attributes="@AdditionalAttributes">
		@((MarkupString)svgHtml)
	</span>
}
else{ 
	<span>???</span>
}
@code {

	[Parameter]
	public string Source { get; set; } = "";

	[Parameter]
	public WvpIconType Type { get; set; } = WvpIconType.NoIcon;

	[Parameter]
	public WvpSize Size { get; set; } = WvpSize.Normal;

	[Parameter]
	public bool IsSpinning { get; set; } = false;

	protected string InternalCssClass = "";

	protected string svgHtml = "";

	private string _source = "";

	private WvpIconType _type = WvpIconType.NoIcon;

	protected override async Task OnParametersSetAsync()
	{
		await Task.Delay(0);
		InternalCssClass = "";

		if (Size != WvpSize.Normal)
		{
			InternalCssClass += $" wvp-icon--{Size.ToDescriptionString()} ";
		}

		if (IsSpinning)
		{
			InternalCssClass += $" wvp-icon--spin ";
		}

		//SVG content
		if (Source != _source)
		{
			_source = Source;
			if (!String.IsNullOrWhiteSpace(Source))
			{
				if (Source.StartsWith("<svg"))
				{
					svgHtml = Source;
				}
				else
				{
					var enumDescDict = IconTypeService.GetIconTypeDescriptionEnumDict();
					if (enumDescDict.ContainsKey(Source))
					{
						Type = enumDescDict[Source];
					}
				}
			}
		}

		if (Type != _type)
		{
			_type = Type;
			if (Type != WvpIconType.NoIcon)
			{
				svgHtml = IconTypeService.GetSVGContentForIconType(Type);
			}
		}
	}
}
