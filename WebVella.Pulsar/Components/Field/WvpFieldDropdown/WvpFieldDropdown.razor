@namespace WebVella.Pulsar.Components
@typeparam ValueItemType
@inherits WvpFieldBase
@using WebVella.Pulsar.Models
@using Microsoft.AspNetCore.Components.Web

<WvpFieldWrapper LabelText="@LabelText" Mode="@Mode">
    <Body>
        @* Field Content here*@

        @switch (Mode)
        {
            @* Display *@
            @*********************************************@
            case WvpFieldMode.Display:
            case WvpFieldMode.Print:
                {
                    <div id="@_domElementId" class="form-control-plaintext @Class @(Size == WvpSize.Small ? "form-control-sm" : "") @(( _value == null) ? "form-control-plaintext--empty" : "")">
                        @if (_value == null)
                        {
                            @if (String.IsNullOrWhiteSpace(ValueEmptyText))
                            {
                                <span>&nbsp;</span>
                            }
                            else
                            {
                                <span>@ValueEmptyText</span>
                            }
                        }
                        else
                        {
                            <div class="btn-group dropdown">
                                <button class="btn btn-secondary" disabled type="button" id="dropdownMenuButton_@_domElementId" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @if (_value == null)
                                    {
                                        @Placeholder
                                    }
                                    else
                                    {
                                        if (@SelectedItemTemplate != null)
                                        {
                                            @SelectedItemTemplate(_value)
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrWhiteSpace(LabelPropetryName))
                                            {
                                                var propInfo = _value.GetType().GetProperty(LabelPropetryName);
                                                if (propInfo == null)
                                                    throw new Exception($"Property '{LabelPropetryName}' not found");

                                                @propInfo.GetValue(_value, null)
                                            }
                                            else
                                            {
                                                @_value
                                            }

                                        }
                                    }
                                </button>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton_@_domElementId">
                                </div>
                            </div>

                        }
                    </div>
                }
                break;

            @* Form *@
            @*********************************************@
            case WvpFieldMode.Form:
                {
                    <div class="btn-group dropdown" id="@_domElementId">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton_@_domElementId" aria-expanded="false" @onclick="(e)=>onDropdownClick(e)">
                            @if (_value == null)
                            {
                                @Placeholder
                            }
                            else
                            {
                                if (@SelectedItemTemplate != null)
                                {
                                    @SelectedItemTemplate(_value)
                                }
                                else
                                {
                                    if (!string.IsNullOrWhiteSpace(LabelPropetryName))
                                    {
                                        var propInfo = _value.GetType().GetProperty(LabelPropetryName);
                                        if (propInfo == null)
                                            throw new Exception($"Property '{LabelPropetryName}' not found");

                                        @propInfo.GetValue(_value, null)
                                    }
                                    else
                                    {
                                        @_value
                                    }
                                }
                            }
                        </button>
                        <div class="dropdown-menu scrollable-menu @_dropdownShowClass" role="menu" aria-labelledby="dropdownMenuButton_@_domElementId">
                            <input class="dropdown-item" @key="@($"{_domElementId}_filter")" type="text" id="wvp-filter-text-@_domElementId"
                                   @bind="@_filter" placeholder="Search..."
                                   @oninput="(e) => _filterOptionsHandler(e)"
                                   @onkeydown="@(e => _onKeydownHandler(e))">
                            @HeaderTemplate
                            @if (!string.IsNullOrWhiteSpace(_groupBy))
                            {
                                var groups = _options.GroupBy(o => typeof(ValueItemType).GetProperty(_groupBy).GetValue(o, null));
                                foreach (var group in groups)
                                {
                                    <div class="group-by-key"> @group.Key</div>
                                    var items = group.ToList();
                                    @for (int i = 0; i < items.Count(); i++)
                                    {
                                        var item = items[i];
                                        if (ItemTemplate != null)
                                        {
                                            //should it be complete control or with link wrapper???
                                            @ItemTemplate(item)
                                        }
                                        else
                                        {
                                            string _activeClass = "";
                                            string _elementId = $"{_domElementId}_{i}";
                                            if (_activeItemIndex == null)
                                            {
                                                if (items.First().Equals(item))
                                                {
                                                    _activeItemIndex = 0;
                                                    _activeClass = "active";
                                                }
                                            }
                                            else
                                            {
                                                if (items != null && _activeItemIndex.Value < items.Count)
                                                    _activeClass = items[_activeItemIndex.Value].Equals(item) ? "active" : "";

                                            }

                                            <a class="dropdown-item @_activeClass" id="@_elementId" href="javascript:void(0)" @onclick="(e) => _selectValueClickHandler(item)" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                                @if (!string.IsNullOrWhiteSpace(LabelPropetryName))
                                                {
                                                    var propInfo = item.GetType().GetProperty(LabelPropetryName);
                                                    if (propInfo == null)
                                                        throw new Exception($"Property '{LabelPropetryName}' not found");

                                                    @propInfo.GetValue(item, null)
                                                }
                                                else
                                                {
                                                    @item
                                                }
                                            </a>
                                        }
                                    }
                                }
                            }
                            else
                            {
                                @for (int i = 0; i < _options.Count(); i++)
                                {
                                    var item = _options[i];
                                    if (ItemTemplate != null)
                                    {
                                        //should it be complete control or with link wrapper???
                                        @ItemTemplate(item)
                                    }
                                    else
                                    {
                                        string _activeClass = "";
                                        string _elementId = $"{_domElementId}_{i}";
                                        if (_activeItemIndex == null)
                                        {
                                            if (_options.First().Equals(item))
                                            {
                                                _activeItemIndex = 0;
                                                _activeClass = "active";
                                            }
                                        }
                                        else
                                        {
                                            if (_options != null && _activeItemIndex.Value < _options.Count)
                                                _activeClass = _options[_activeItemIndex.Value].Equals(item) ? "active" : "";

                                        }

                                        <a class="dropdown-item @_activeClass" id="@_elementId" href="javascript:void(0)" @onclick="(e) => _selectValueClickHandler(item)" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                            @if (!string.IsNullOrWhiteSpace(LabelPropetryName))
                                            {
                                                var propInfo = item.GetType().GetProperty(LabelPropetryName);
                                                if (propInfo == null)
                                                    throw new Exception($"Property '{LabelPropetryName}' not found");

                                                @propInfo.GetValue(item, null)
                                            }
                                            else
                                            {
                                                @item
                                            }
                                        </a>
                                    }
                                }
                            }
                            @FooterTemplate
                        </div>
                    </div>
                }
                break;

            @* Inline Edit *@
            @*********************************************@
            case WvpFieldMode.InlineEdit:
                {
                    @if (!_editEnabled)
                    {
                        <div class="input-group @Class" id="@_domElementId">
                            <div class="form-control-plaintext @(Size == WvpSize.Small ? "form-control-sm" : "") @((_value == null) ? "form-control-plaintext--empty" : "")"
                                 @onclick="@(e => _toggleInlineEditClickHandler(true,false))">
                                @if (_value == null)
                                {
                                    @if (String.IsNullOrWhiteSpace(ValueEmptyText))
                                    {
                                        <span>&nbsp;</span>
                                    }
                                    else
                                    {
                                        <span>@ValueEmptyText</span>
                                    }
                                }
                                else
                                {
                                    <div class="btn-group dropdown">
                                        <button class="btn btn-secondary" disabled type="button" id="dropdownMenuButton_@_domElementId" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @if (_value == null)
                                            {
                                                @Placeholder
                                            }
                                            else
                                            {
                                                if (@SelectedItemTemplate != null)
                                                {
                                                    @SelectedItemTemplate(_value)
                                                }
                                                else
                                                {
                                                    if (!string.IsNullOrWhiteSpace(LabelPropetryName))
                                                    {
                                                        var propInfo = _value.GetType().GetProperty(LabelPropetryName);
                                                        if (propInfo == null)
                                                            throw new Exception($"Property '{LabelPropetryName}' not found");

                                                        @propInfo.GetValue(_value, null)
                                                    }
                                                    else
                                                    {
                                                        @_value
                                                    }
                                                }
                                            }
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton_@_domElementId">
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="input-group-append">
                                <div class="input-group-text" @onclick="@(e => _toggleInlineEditClickHandler(true,false))">
                                    <WvpIcon Type="WvpIconType.BsPencil" Size="WvpSize.Small" />
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {

                        <div id="@_domElementId" class="form-control-plaintext @Class p-0 @(Size == WvpSize.Small ? "form-control-sm" : "")">
                            <div class="dropdown">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton_@_domElementId" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @if (_value == null)
                                    {
                                        @Placeholder
                                    }
                                    else
                                    {
                                        if (@SelectedItemTemplate != null)
                                        {
                                            @SelectedItemTemplate(_value)
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrWhiteSpace(LabelPropetryName))
                                            {
                                                var propInfo = _value.GetType().GetProperty(LabelPropetryName);
                                                if (propInfo == null)
                                                    throw new Exception($"Property '{LabelPropetryName}' not found");

                                                @propInfo.GetValue(_value, null)
                                            }
                                            else
                                            {
                                                @_value
                                            }
                                        }
                                    }
                                </button>
                                <div class="dropdown-menu scrollable-menu" aria-labelledby="dropdownMenuButton_@_domElementId">
                                    @HeaderTemplate
                                    @if (!string.IsNullOrWhiteSpace(_groupBy))
                                    {
                                        var groups = _options.GroupBy(o => typeof(ValueItemType).GetProperty(_groupBy).GetValue(o, null));
                                        foreach (var group in groups)
                                        {
                                            <div class="group-by-key"> @group.Key</div>
                                            var items = group.ToList();
                                            @for (int i = 0; i < items.Count(); i++)
                                        {
                                            var item = items[i];

                                            if (ItemTemplate != null)
                                            {
                                                //should it be complete control or with link wrapper???
                                                @ItemTemplate(item)
                                            }
                                            else
                                            {
                                                string _activeClass = "";
                                                string _elementId = $"{_domElementId}_inline_{i}";
                                                if (_activeItemIndex == null)
                                                {
                                                    if (items.First().Equals(item))
                                                    {
                                                        _activeItemIndex = 0;
                                                        _activeClass = "active";
                                                    }
                                                }
                                                else
                                                {
                                                    if (items != null && _activeItemIndex.Value < items.Count)
                                                        _activeClass = _options[_activeItemIndex.Value].Equals(item) ? "active" : "";

                                                }

                                                <a class="dropdown-item @_activeClass" id="@_elementId" href="javascript:void(0)" @onclick="(e) => _selectValueClickHandler(item)" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                                    @if (!string.IsNullOrWhiteSpace(LabelPropetryName))
                                                    {
                                                        var propInfo = item.GetType().GetProperty(LabelPropetryName);
                                                        if (propInfo == null)
                                                            throw new Exception($"Property '{LabelPropetryName}' not found");

                                                        @propInfo.GetValue(item, null)
                                                    }
                                                    else
                                                    {
                                                        @item
                                                    }
                                                </a>
                                            }
                                        }
                                        }
                                    }
                                    else
                                    {
                                        @for (int i = 0; i < _options.Count(); i++)
                                        {
                                            var item = _options[i];

                                            if (ItemTemplate != null)
                                            {
                                                //should it be complete control or with link wrapper???
                                                @ItemTemplate(item)
                                            }
                                            else
                                            {
                                                string _activeClass = "";
                                                string _elementId = $"{_domElementId}_inline_{i}";
                                                if (_activeItemIndex == null)
                                                {
                                                    if (_options.First().Equals(item))
                                                    {
                                                        _activeItemIndex = 0;
                                                        _activeClass = "active";
                                                    }
                                                }
                                                else
                                                {
                                                    if (_options != null && _activeItemIndex.Value < _options.Count)
                                                        _activeClass = _options[_activeItemIndex.Value].Equals(item) ? "active" : "";

                                                }

                                                <a class="dropdown-item @_activeClass" id="@_elementId" href="javascript:void(0)" @onclick="(e) => _selectValueClickHandler(item)" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                                    @if (!string.IsNullOrWhiteSpace(LabelPropetryName))
                                                    {
                                                        var propInfo = item.GetType().GetProperty(LabelPropetryName);
                                                        if (propInfo == null)
                                                            throw new Exception($"Property '{LabelPropetryName}' not found");

                                                        @propInfo.GetValue(item, null)
                                                    }
                                                    else
                                                    {
                                                        @item
                                                    }
                                                </a>
                                            }
                                        }
                                    }
                                    @FooterTemplate
                                </div>
                            </div>
                        </div>

                    }
                }
                break;
        }
    </Body>
</WvpFieldWrapper>