@namespace WebVella.Pulsar.Components
@inherits WvpFieldBase
@using WebVella.Pulsar.Models
@using Microsoft.AspNetCore.Components.Web
@using System.Collections.Generic

@* Field Content here*@

@switch (Mode)
{
    @* Display *@
    @*********************************************@
    case WvpFieldMode.Display:
    case WvpFieldMode.Print:
        {
            <div class="form-control-plaintext @Class @(Size == WvpSize.Small ? "form-control-sm" : "") @(_value.Count == 0 ? "form-control-plaintext--empty" : "")"
                 id="@_domElementId">
                @if (_value.Count() == 0)
                {
                    @if (String.IsNullOrWhiteSpace(ValueEmptyText))
                    {
                        <span>&nbsp;</span>
                    }
                    else
                    {
                        <span>@ValueEmptyText</span>
                    }
                }
                else
                {
                    @foreach (var _row in Rows)
                    {
                        var isChecked = _value.Contains(_row.Value);
                        Dictionary<string, object> _attributes = new Dictionary<string, object>();
                        _attributes.Add("data-row-key", $"{_row.Value}");
                        string alignmentCss = "";
                        if (AlignmentMode == WvpFieldAlignmentMode.Horizontal)
                        {
                            alignmentCss = "form-check-inline";
                        }

                        @if (isChecked)
                        {
                            <div class="form-check @alignmentCss">
                                <label class="wvp-field__label">@_row.Label</label>
                                <label class="label pl-2" @attributes="_attributes">@LabelCheckedText</label>
                            </div>
                        }
                        else
                        {
                            <div class="form-check @alignmentCss">
                                <label class="wvp-field__label">@_row.Label</label>
                                <label class="label pl-2" @attributes="_attributes">@LabelUnCheckedText</label>
                            </div>
                        }
                    }

                }
            </div>
        }
        break;

    @* Form *@
    @*********************************************@
    case WvpFieldMode.Form:
        {
            @foreach (var _row in Rows)
            {
                var isChecked = _value.Contains(_row.Value);
                Dictionary<string, object> _attributes = new Dictionary<string, object>();
                _attributes.Add("data-row-key", $"{_row.Value}");
                string alignmentCss = "";
                if (AlignmentMode == WvpFieldAlignmentMode.Horizontal)
                {
                    alignmentCss = "form-check-inline";
                }

                <div class="form-check @alignmentCss">
                    <input class="form-check-input" type="checkbox" @attributes="_attributes" checked="@isChecked" id="@($"{_domElementId}_{ _row.Value}")" @oninput="(e) => _onInputEvent(e, _row)">
                    <label class="form-check-label" for="@($"{_domElementId}_{ _row.Value}")">
                        @_row.Label
                    </label>
                </div>
            }
        }
        break;

    @* Design *@
    @*********************************************@
    case WvpFieldMode.InlineEdit:
        {
            @if (!_editEnabled)
            {
                <div class="input-group @Class" id="@_domElementId">
                    <div class="form-control-plaintext @(Size == WvpSize.Small ? "form-control-sm" : "") @(_value.Count == 0 ? "form-control-plaintext--empty" : "")"
                         @onclick="@(e => _toggleInlineEditClickHandler(true,false))">
                        @if (_value.Count() == 0)
                        {
                            @if (String.IsNullOrWhiteSpace(ValueEmptyText))
                            {
                                <span>&nbsp;</span>
                            }
                            else
                            {
                                <span>@ValueEmptyText</span>
                            }
                        }
                        else
                        {
                            @foreach (var _row in Rows)
                            {
                                var isChecked = _value.Contains(_row.Value);
                                Dictionary<string, object> _attributes = new Dictionary<string, object>();
                                _attributes.Add("data-row-key", $"{_row.Value}");
                                string alignmentCss = "";
                                if (AlignmentMode == WvpFieldAlignmentMode.Horizontal)
                                {
                                    alignmentCss = "form-check-inline";
                                }

                                @if (isChecked)
                                {
                                    <div class="form-check @alignmentCss">
                                        <label class="wvp-field__label">@_row.Label</label>
                                        <label class="label pl-2" @attributes="_attributes">@LabelCheckedText</label>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-check @alignmentCss">
                                        <label class="wvp-field__label">@_row.Label</label>
                                        <label class="label pl-2" @attributes="_attributes">@LabelUnCheckedText</label>
                                    </div>
                                }
                            }
                        }
                    </div>
                    <div class="input-group-append">
                        <div class="input-group-text" @onclick="@(e => _toggleInlineEditClickHandler(true,false))">
                            <WvpIcon Type="WvpIconType.BsPencil" Size="WvpSize.Small" />
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div id="@_domElementId" class=" @Class">

                    <div class="form-control-plaintext p-0 @(Size == WvpSize.Small ? "form-control-sm" : "")">
                        @foreach (var _row in Rows)
                        {
                            var isChecked = _value.Contains(_row.Value);
                            Dictionary<string, object> _attributes = new Dictionary<string, object>();
                            _attributes.Add("data-row-key", $"{_row.Value}");
                            string alignmentCss = "";
                            if (AlignmentMode == WvpFieldAlignmentMode.Horizontal)
                            {
                                alignmentCss = "form-check-inline";
                            }

                            <div class="form-check @alignmentCss">
                                <input class="form-check-input" type="checkbox" @attributes="_attributes" checked="@isChecked" id="@($"{_domElementId}_{ _row.Value}")" @oninput="(e) => _onInputEvent(e, _row)">
                                <label class="form-check-label" for="@($"{_domElementId}_{ _row.Value}")">
                                    @_row.Label
                                </label>
                            </div>
                        }
                    </div>


                </div>
            }
        }
        break;
}