@namespace WebVella.Pulsar.Components
@inherits WvpFieldBase
@using WebVella.Pulsar.Models
@using Microsoft.AspNetCore.Components.Web

@* Field Content here*@

@switch (Mode)
{
	@* Display *@
	@*********************************************@
	case WvpFieldMode.Display:
	case WvpFieldMode.Print:
		{
			<div class="form-control-plaintext @Class @(Size == WvpSize.Small ? "form-control-sm" : "") @(String.IsNullOrWhiteSpace(_value) ? "form-control-plaintext--empty" : "")"
				  id="@_domElementId" @attributes="@_attributes">
				@if (String.IsNullOrWhiteSpace(_value))
				{
					@if (String.IsNullOrWhiteSpace(ValueEmptyText))
					{
						<span>&nbsp;</span>
					}
					else
					{
						<span>@ValueEmptyText</span>
					}
				}
				else
				{
					WvpSelectOption selectedOption = Options.FirstOrDefault(x => x.Value == _value);
					if (selectedOption == null)
					{
						<span><WvpIcon Type="WvpIconType.BsExclamationCircle" Class="wvp-red" /> @_value</span>
					}
					else
					{
						@selectedOption.Label;
					}
				}
			</div>
		}
		break;

    @* Form *@
    @*********************************************@
    case WvpFieldMode.Form:
        {
            @if (Options.Count > TypeaheadSearchEnabledItemCount)
            {
                <WvpFieldDropdown ValueItemType="WvpSelectOption" Mode="WvpFieldMode.Form" Value="@_value" Placeholder="@Placeholder"
                                  ValueChanged="_onInputEvent" GenericOptions="@_options" LabelPropetryName="Label" ValuePropetryName="Value"
                                  FilterEnabled="true" FilterChanged="_filterOptionsHandler">
                </WvpFieldDropdown>
            }
            else
            {
                <select class="form-control @Class @(Size == WvpSize.Small ? "form-control-sm" : "")"
                        id="@_domElementId" @attributes="@_attributes"
                        name="@Name"
                        @oninput="(e) => _onInputEvent(e)">
                    @if (String.IsNullOrWhiteSpace(_value) && !String.IsNullOrWhiteSpace(Placeholder) && !Required)
                    {
                        <option value="" disabled selected>@Placeholder</option>
                    }
                    else if (!Required)
                    {
                        <option></option>
                    }
                    @foreach (var option in Options)
                    {
                        var attributes = new Dictionary<string, object>();
                        if (_value.Contains(option.Value))
                        {
                            attributes["selected"] = "selected";
                        }
                        <option value="@option.Value" @key="@option.Value" @attributes="@attributes">@option.Label</option>
                    }
                </select>
            }
        }
        break;

    @* Design *@
    @*********************************************@
    case WvpFieldMode.InlineEdit:
        {
            @if (!_editEnabled)
            {
                <div class="input-group @Class @(Size == WvpSize.Small ? "input-group-sm" : "")">
                    <div class="form-control-plaintext @(String.IsNullOrWhiteSpace(_value) ? "form-control-plaintext--empty" : "")"
                         id="@_domElementId" @attributes="@_attributes"
                         @onclick="@(e => _toggleInlineEditClickHandler(true,false))">
                        @if (String.IsNullOrWhiteSpace(_value))
                        {
                            @if (String.IsNullOrWhiteSpace(ValueEmptyText))
                            {
                                <span>&nbsp;</span>
                            }
                            else
                            {
                                <span>@ValueEmptyText</span>
                            }
                        }
                        else
                        {
                            WvpSelectOption selectedOption = Options.FirstOrDefault(x => x.Value == _value);
                            if (selectedOption == null)
                            {
                                <span><WvpIcon Type="WvpIconType.BsExclamationCircle" Class="wvp-red" /> @_value</span>
                            }
                            else
                            {
                                @selectedOption.Label;
                            }
                        }
                    </div>
                    <div class="input-group-append">
                        <div class="input-group-text" @onclick="@(e => _toggleInlineEditClickHandler(true,false))">
                            <WvpIcon Type="WvpIconType.BsPencil" Size="WvpSize.Small" />
                        </div>
                    </div>
                </div>
            }
            else
            {
                @if (Options.Count > TypeaheadSearchEnabledItemCount)
                {
                    <WvpFieldDropdown ValueItemType="WvpSelectOption" Mode="WvpFieldMode.Form" Value="@_value" Placeholder="@Placeholder"
                                      ValueChanged="_onInputEvent" Id="@_domElementId" GenericOptions="@_options" LabelPropetryName="Label" ValuePropetryName="Value"
                                      FilterEnabled="true" FilterChanged="_filterOptionsHandler" @onfocusout="@(e => _toggleInlineEditClickHandler(false, true))">
                    </WvpFieldDropdown>
                }
                else
                {
                    <select class="form-control @Class @(Size == WvpSize.Small ? "form-control-sm" : "")"
                            id="@_domElementId"
                            @oninput="(e) => _onInputEvent(e)"
                            @onfocusout="@(e => _toggleInlineEditClickHandler(false, true))">
                        @if (String.IsNullOrWhiteSpace(_value) && !String.IsNullOrWhiteSpace(Placeholder) && !Required)
                        {
                            <option value="" disabled selected>@Placeholder</option>
                        }
                        else if (!Required)
                        {
                            <option></option>
                        }
                        @foreach (var option in Options)
                        {
                            var attributes = new Dictionary<string, object>();
                            if (_value.Contains(option.Value))
                            {
                                attributes["selected"] = "selected";
                            }
                            <option value="@option.Value" @key="@option.Value" @attributes="@attributes">@option.Label</option>
                        }
                    </select>
                }
            }
        }
        break;
}