@namespace WebVella.Pulsar.Components
@inherits WvpFieldBase
@using WebVella.Pulsar.Models
@using Microsoft.AspNetCore.Components.Web

@* Field Content here*@

@switch (Mode)
{
    @* Display *@
    @*********************************************@
    case WvpFieldMode.Display:
    case WvpFieldMode.Print:
        {
            <div class="form-control-plaintext @Class  @(Size == WvpSize.Small ? "form-control-sm" : "") @(String.IsNullOrWhiteSpace(_value) ? "form-control-plaintext--empty" : "")"
                 id="@_domElementId">
                @if (String.IsNullOrWhiteSpace(_value))
                {
                    @if (String.IsNullOrWhiteSpace(ValueEmptyText))
                    {
                        <span>&nbsp;</span>
                    }
                    else
                    {
                        <span>@ValueEmptyText</span>
                    }
                }
                else
                {
                    @_value
                }
            </div>
        }
        break;

    @* Form *@
    @*********************************************@
    case WvpFieldMode.Form:
        {
            <div class="@(_options.Count > 0 ? "dropdown":"") @(_validationErrors.Count > 0 ? "is-invalid" : "")">
                <span class="typeahead">
                    <input class="form-control"
                           id="@_domElementId"
                           value="@_value"
                           @oninput="(e) => _onInputChangeKeypressHandlerAsync(e)"
                           @onkeydown="@(e => _onKeydownHandler(e))"
                           @onkeyup:stopPropagation="true"
                           @onkeyup:preventDefault="true"
                           autocomplete="off"
                           spellcheck="false" />
                    <pre>@_prefill</pre>
                </span>

                @if (_options.Count > 0)
                {
                    <div class="dropdown-menu scrollable-menu show"
                         @onmousedown:stopPropagation="true"
                         @onmousedown:preventDefault="true"
                         @onmouseup:stopPropagation="true"
                         @onmouseup:preventDefault="true">
                        @for (int i = 0; i < _options.Count; i++)
                        {
                            var _ddOption = _options[i];
                            string _activeClass = "";
                            string _elementId = $"{_domElementId}_{i}";
                            if (_activeItemIndex == null)
                            {
                                if (_options.First() == _ddOption)
                                {
                                    _activeItemIndex = 0;
                                    _activeClass = "active";
                                }
                            }
                            else
                            {
                                if (_options != null && _activeItemIndex.Value < _options.Count)
                                    _activeClass = _options[_activeItemIndex.Value] == _ddOption ? "active" : "";
                            }

                            <div class="dropdown-item @_activeClass" id="@_elementId" @onclick="(e)=>_onSelectOption(_ddOption)">@_ddOption</div>
                        }
                        @if(WillLoadMoreResults)
                        {
                            <a href="javascript:void(0)" class="dropdown-item" @onclick="(e)=>_onLoadMoreAsync()" @onclick:preventDefault="true" @onclick:stopPropagation="true">Load More</a>
                        }
                    </div>
                }
            </div>

        }
        break;

    @* Design *@
    @*********************************************@
    case WvpFieldMode.InlineEdit:
        {
            @if (!_editEnabled)
            {
                <div class="input-group @Class @(Size == WvpSize.Small ? "input-group-sm" : "")">
                    <div class="form-control-plaintext @(String.IsNullOrWhiteSpace(_value) ? "form-control-plaintext--empty" : "")"
                         id="@_domElementId"
                         @onclick="@(e => _toggleInlineEditClickHandler(true,false))">
                        @if (String.IsNullOrWhiteSpace(_value))
                        {
                            @if (String.IsNullOrWhiteSpace(ValueEmptyText))
                            {
                                <span>&nbsp;</span>
                            }
                            else
                            {
                                <span>@ValueEmptyText</span>
                            }
                        }
                        else
                        {
                            @_value
                        }
                    </div>
                    <div class="input-group-append">
                        <div class="input-group-text" @onclick="@(e => _toggleInlineEditClickHandler(true,false))">
                            <WvpIcon Type="WvpIconType.BsPencil" Size="WvpSize.Small" />
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="@(_options.Count > 0 ? "dropdown":"")">
                    <span class="typeahead">
                        <input class="form-control"
                               id="@_domElementId"
                               value="@_value"
                               @oninput="(e) => _onInputChangeKeypressHandlerAsync(e)"
                               @onkeydown="@(e => _onKeydownHandler(e))"
                               @onkeyup:stopPropagation="true"
                               @onkeyup:preventDefault="true"
                               autocomplete="off"
                               spellcheck="false" />
                        <pre>@_prefill</pre>
                    </span>
                    @if (_options.Count > 0)
                    {
                        <div class="dropdown-menu scrollable-menu show"
                             @onmousedown:stopPropagation="true"
                             @onmousedown:preventDefault="true"
                             @onmouseup:stopPropagation="true"
                             @onmouseup:preventDefault="true">
                            @for (int i = 0; i < _options.Count; i++)
                            {
                                var _ddOption = _options[i];
                                string _activeClass = "";
                                string _elementId = $"{_domElementId}_inline_{i}";
                                if (_activeItemIndex == null)
                                {
                                    if (_options.First() == _ddOption)
                                    {
                                        _activeItemIndex = 0;
                                        _activeClass = "active";
                                    }
                                }
                                else
                                {
                                    if (_options != null && _activeItemIndex.Value < _options.Count)
                                        _activeClass = _options[_activeItemIndex.Value] == _ddOption ? "active" : "";

                                }

                                <div class="dropdown-item @_activeClass" id="@_elementId" @onclick="(e)=>_onSelectOption(_ddOption)">@_ddOption</div>
                            }
                            @if(WillLoadMoreResults)
                            {
                                <a href="javascript:void(0)" class="dropdown-item" @onclick="(e)=>_onLoadMoreAsync()" @onclick:preventDefault="true" @onclick:stopPropagation="true">Load More</a>
                            }
                        </div>
                    }
                </div>
            }
        }
        break;
}